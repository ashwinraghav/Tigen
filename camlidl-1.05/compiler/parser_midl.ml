type token =
  | AMPER
  | AMPERAMPER
  | BANG
  | BANGEQUAL
  | BAR
  | BARBAR
  | BOOLEAN
  | BYTE
  | CARET
  | CASE
  | CHAR
  | CHARACTER of (char)
  | COLON
  | COMMA
  | CONST
  | CPP_QUOTE
  | DEFAULT
  | DOT
  | DOUBLE
  | ENUM
  | EOF
  | EQUAL
  | EQUALEQUAL
  | FALSE
  | FLOAT
  | GREATER
  | GREATEREQUAL
  | GREATERGREATER
  | GREATERGREATERGREATER
  | HANDLE_T
  | HYPER
  | IDENT of (string)
  | IMPORT
  | INT
  | INT64
  | INTERFACE
  | INTEGER of (int64)
  | LBRACE
  | LBRACKET
  | LESS
  | LESSEQUAL
  | LESSLESS
  | LONG
  | LPAREN
  | MINUS
  | NULL
  | PERCENT
  | PLUS
  | QUESTIONMARK
  | QUOTE
  | RBRACE
  | RBRACKET
  | RPAREN
  | SEMI
  | SHORT
  | SIGNED
  | SIZEOF
  | SLASH
  | SMALL
  | STAR
  | STRING of (string)
  | STRUCT
  | SWITCH
  | TILDE
  | TRUE
  | TYPEDEF
  | TYPEIDENT of (string)
  | UNION
  | UNSIGNED
  | UUID of (string)
  | VOID
  | WCHAR_T

open Parsing;;
# 18 "parser_midl.mly"

open Printf
open Cvttyp
open Idltypes
open Funct
open Typedef
open Constdecl
open Intf
open File
open Parse_aux

# 89 "parser_midl.ml"
let yytransl_const = [|
  257 (* AMPER *);
  258 (* AMPERAMPER *);
  259 (* BANG *);
  260 (* BANGEQUAL *);
  261 (* BAR *);
  262 (* BARBAR *);
  263 (* BOOLEAN *);
  264 (* BYTE *);
  265 (* CARET *);
  266 (* CASE *);
  267 (* CHAR *);
  269 (* COLON *);
  270 (* COMMA *);
  271 (* CONST *);
  272 (* CPP_QUOTE *);
  273 (* DEFAULT *);
  274 (* DOT *);
  275 (* DOUBLE *);
  276 (* ENUM *);
    0 (* EOF *);
  277 (* EQUAL *);
  278 (* EQUALEQUAL *);
  279 (* FALSE *);
  280 (* FLOAT *);
  281 (* GREATER *);
  282 (* GREATEREQUAL *);
  283 (* GREATERGREATER *);
  284 (* GREATERGREATERGREATER *);
  285 (* HANDLE_T *);
  286 (* HYPER *);
  288 (* IMPORT *);
  289 (* INT *);
  290 (* INT64 *);
  291 (* INTERFACE *);
  293 (* LBRACE *);
  294 (* LBRACKET *);
  295 (* LESS *);
  296 (* LESSEQUAL *);
  297 (* LESSLESS *);
  298 (* LONG *);
  299 (* LPAREN *);
  300 (* MINUS *);
  301 (* NULL *);
  302 (* PERCENT *);
  303 (* PLUS *);
  304 (* QUESTIONMARK *);
  305 (* QUOTE *);
  306 (* RBRACE *);
  307 (* RBRACKET *);
  308 (* RPAREN *);
  309 (* SEMI *);
  310 (* SHORT *);
  311 (* SIGNED *);
  312 (* SIZEOF *);
  313 (* SLASH *);
  314 (* SMALL *);
  315 (* STAR *);
  317 (* STRUCT *);
  318 (* SWITCH *);
  319 (* TILDE *);
  320 (* TRUE *);
  321 (* TYPEDEF *);
  323 (* UNION *);
  324 (* UNSIGNED *);
  326 (* VOID *);
  327 (* WCHAR_T *);
    0|]

let yytransl_block = [|
  268 (* CHARACTER *);
  287 (* IDENT *);
  292 (* INTEGER *);
  316 (* STRING *);
  322 (* TYPEIDENT *);
  325 (* UUID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\004\000\005\000\013\000\024\000\024\000\024\000\023\000\023\000\
\023\000\025\000\025\000\026\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\028\000\028\000\028\000\028\000\028\000\
\029\000\029\000\022\000\022\000\027\000\020\000\020\000\020\000\
\030\000\030\000\030\000\031\000\031\000\031\000\032\000\032\000\
\007\000\007\000\033\000\033\000\035\000\008\000\034\000\034\000\
\036\000\036\000\037\000\037\000\039\000\038\000\038\000\009\000\
\040\000\040\000\042\000\042\000\041\000\041\000\014\000\006\000\
\006\000\043\000\043\000\043\000\043\000\044\000\044\000\044\000\
\044\000\044\000\045\000\045\000\046\000\046\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\047\000\047\000\048\000\
\048\000\048\000\049\000\049\000\010\000\010\000\016\000\016\000\
\017\000\017\000\012\000\012\000\015\000\018\000\018\000\018\000\
\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\003\000\003\000\003\000\
\004\000\009\000\004\000\002\000\008\000\004\000\003\000\002\000\
\007\000\004\000\008\000\005\000\007\000\000\000\000\000\001\000\
\001\000\001\000\003\000\003\000\001\000\002\000\001\000\002\000\
\001\000\002\000\001\000\002\000\002\000\001\000\001\000\001\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\001\000\
\002\000\002\000\001\000\001\000\001\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000\
\000\000\001\000\001\000\003\000\002\000\000\000\002\000\003\000\
\001\000\003\000\002\000\002\000\003\000\003\000\001\000\000\000\
\005\000\011\000\001\000\002\000\004\000\005\000\001\000\002\000\
\003\000\004\000\001\000\002\000\003\000\000\000\003\000\006\000\
\001\000\003\000\001\000\003\000\001\000\000\000\001\000\000\000\
\003\000\001\000\000\000\003\000\002\000\001\000\004\000\002\000\
\002\000\002\000\001\000\003\000\001\000\000\000\001\000\001\000\
\001\000\001\000\001\000\001\000\005\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\002\000\002\000\002\000\002\000\004\000\004\000\
\004\000\003\000\003\000\003\000\003\000\001\000\002\000\001\000\
\002\000\001\000\003\000\002\000\000\000\001\000\000\000\002\000\
\001\000\000\000\001\000\001\000\001\000\004\000\006\000\004\000\
\002\000"

let yydefred = "\000\000\
\002\000\000\000\177\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\171\000\000\000\172\000\
\000\000\000\000\000\000\000\000\000\000\004\000\005\000\051\000\
\052\000\048\000\000\000\039\000\000\000\038\000\059\000\063\000\
\040\000\053\000\000\000\062\000\000\000\061\000\000\000\057\000\
\000\000\000\000\056\000\058\000\000\000\000\000\000\000\029\000\
\000\000\000\000\012\000\000\000\169\000\016\000\000\000\000\000\
\031\000\033\000\035\000\000\000\000\000\015\000\112\000\000\000\
\114\000\000\000\105\000\113\000\000\000\000\000\000\000\000\000\
\000\000\166\000\064\000\050\000\042\000\055\000\000\000\000\000\
\000\000\049\000\041\000\054\000\000\000\006\000\007\000\008\000\
\037\000\000\000\066\000\000\000\000\000\043\000\173\000\000\000\
\000\000\000\000\000\000\176\000\000\000\000\000\121\000\123\000\
\119\000\120\000\000\000\000\000\000\000\000\000\000\000\124\000\
\000\000\122\000\000\000\000\000\115\000\000\000\174\000\000\000\
\000\000\000\000\067\000\000\000\046\000\000\000\009\000\000\000\
\011\000\000\000\044\000\000\000\000\000\047\000\045\000\000\000\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\111\000\000\000\
\070\000\073\000\000\000\070\000\000\000\000\000\097\000\000\000\
\000\000\083\000\000\000\000\000\000\000\087\000\000\000\091\000\
\000\000\000\000\072\000\168\000\002\000\000\000\000\000\000\000\
\000\000\159\000\000\000\157\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\156\000\155\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\154\000\116\000\175\000\
\000\000\000\000\075\000\068\000\000\000\000\000\000\000\000\000\
\081\000\084\000\000\000\000\000\086\000\088\000\000\000\000\000\
\092\000\000\000\024\000\000\000\000\000\000\000\026\000\000\000\
\000\000\000\000\000\000\000\000\164\000\000\000\152\000\153\000\
\000\000\074\000\076\000\000\000\000\000\000\000\098\000\096\000\
\000\000\093\000\000\000\000\000\089\000\000\000\000\000\022\000\
\000\000\000\000\000\000\163\000\000\000\077\000\078\000\085\000\
\090\000\095\000\000\000\028\000\000\000\027\000\013\000\000\000\
\010\000\079\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\082\000\020\000\000\000\000\000\021\000"

let yydgoto = "\002\000\
\003\000\004\000\012\000\013\000\014\000\015\000\065\000\066\000\
\067\000\081\000\056\000\082\000\016\000\017\000\104\000\146\000\
\062\000\018\000\151\000\129\000\123\000\130\000\005\001\045\001\
\006\001\007\001\131\000\058\000\102\000\187\000\013\001\051\001\
\193\000\197\000\194\000\198\000\199\000\000\001\200\000\190\000\
\247\000\191\000\026\000\027\000\124\000\125\000\153\000\210\000\
\211\000"

let yysindex = "\033\000\
\000\000\000\000\000\000\008\000\002\255\013\255\000\000\068\255\
\030\000\072\255\002\255\000\000\084\255\101\255\097\002\147\255\
\225\255\210\255\142\002\211\255\232\255\000\000\030\000\000\000\
\228\254\096\255\229\255\150\255\142\002\000\000\000\000\000\000\
\000\000\000\000\142\002\000\000\183\255\000\000\000\000\000\000\
\000\000\000\000\002\000\000\000\147\001\000\000\183\255\000\000\
\183\255\025\002\000\000\000\000\252\255\005\000\010\000\000\000\
\032\000\158\255\000\000\183\255\000\000\000\000\183\255\183\255\
\000\000\000\000\000\000\032\000\018\000\000\000\000\000\165\003\
\000\000\030\000\000\000\000\000\031\000\039\000\032\000\032\000\
\017\000\000\000\000\000\000\000\000\000\000\000\051\000\242\254\
\023\000\000\000\000\000\000\000\051\000\000\000\000\000\000\000\
\000\000\007\255\000\000\051\000\051\000\000\000\000\000\005\255\
\049\000\220\255\162\255\000\000\165\003\165\003\000\000\000\000\
\000\000\000\000\223\001\165\003\165\003\054\000\165\003\000\000\
\165\003\000\000\033\001\055\255\000\000\229\255\000\000\043\000\
\235\255\078\000\000\000\183\255\000\000\002\255\000\000\241\255\
\000\000\065\000\000\000\067\000\103\000\000\000\000\000\183\255\
\000\000\097\000\092\000\117\000\015\255\015\255\052\255\073\000\
\087\000\015\255\015\255\142\002\015\255\015\255\165\003\165\003\
\165\003\165\003\165\003\165\003\231\255\165\003\165\003\165\003\
\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\
\165\003\165\003\165\003\165\003\183\255\165\003\000\000\089\000\
\000\000\000\000\107\000\000\000\125\000\139\000\000\000\142\002\
\255\254\000\000\183\255\141\000\014\255\000\000\193\255\000\000\
\061\003\229\254\000\000\000\000\000\000\061\003\165\003\168\255\
\113\000\000\000\107\000\000\000\165\003\105\000\197\255\082\001\
\192\003\126\001\139\255\170\001\000\000\000\000\192\003\050\002\
\050\002\254\254\254\254\122\000\050\002\050\002\254\254\074\255\
\015\255\074\255\181\000\015\255\015\255\000\000\000\000\000\000\
\106\000\097\003\000\000\000\000\165\003\183\255\114\000\032\000\
\000\000\000\000\159\000\002\255\000\000\000\000\142\002\112\000\
\000\000\183\255\000\000\142\002\123\000\160\000\000\000\253\254\
\183\255\033\001\124\000\107\000\000\000\015\255\000\000\000\000\
\165\003\000\000\000\000\111\003\230\000\033\001\000\000\000\000\
\051\255\000\000\135\000\032\000\000\000\144\000\032\000\000\000\
\002\255\210\255\145\000\000\000\033\001\000\000\000\000\000\000\
\000\000\000\000\217\255\000\000\149\000\000\000\000\000\183\255\
\000\000\000\000\156\000\158\000\241\255\076\000\092\255\150\000\
\191\000\000\000\000\000\153\000\163\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\187\002\232\002\000\000\000\000\000\000\
\125\255\000\000\232\002\000\000\000\000\000\000\175\000\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\049\255\000\000\154\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\
\000\000\000\000\187\255\000\000\000\000\000\000\175\255\000\000\
\118\000\000\000\000\000\000\000\086\255\090\255\104\255\000\000\
\202\255\050\000\000\000\000\000\000\000\000\000\100\000\152\000\
\000\000\000\000\000\000\202\255\000\000\000\000\000\000\099\255\
\000\000\178\255\000\000\000\000\000\000\000\000\021\000\253\000\
\053\001\000\000\000\000\000\000\000\000\000\000\050\000\115\255\
\140\255\000\000\000\000\000\000\050\000\000\000\000\000\000\000\
\000\000\000\000\000\000\050\000\050\000\000\000\000\000\179\000\
\103\001\116\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\108\255\000\000\000\000\181\255\000\000\000\000\
\000\000\164\000\000\000\000\000\000\000\232\002\000\000\000\000\
\000\000\000\000\000\000\000\000\063\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\239\003\042\004\166\000\000\000\
\000\000\101\004\160\004\000\000\219\004\022\005\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\099\255\000\000\000\000\
\000\000\000\000\120\255\000\000\000\255\162\000\000\000\000\000\
\232\002\000\000\000\000\000\000\000\000\000\000\032\002\000\000\
\000\000\021\003\000\000\000\000\000\000\000\000\000\000\000\000\
\174\000\000\000\178\000\000\000\000\000\000\000\212\007\156\255\
\188\007\046\255\129\002\218\007\000\000\000\000\194\007\070\007\
\076\007\167\006\220\006\000\000\129\007\135\007\017\007\061\006\
\081\005\114\006\000\000\140\005\199\005\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\183\000\000\000\021\000\
\000\000\000\000\000\000\032\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\185\000\000\000\187\002\
\000\000\188\000\000\000\190\000\000\000\002\006\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\100\255\000\000\000\000\
\000\000\000\000\000\000\021\000\000\000\000\000\021\000\000\000\
\232\002\001\000\000\000\000\000\210\000\000\000\000\000\000\000\
\000\000\000\000\206\000\000\000\192\000\000\000\000\000\206\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\039\001\000\000\000\000\000\000\251\255\231\001\232\001\
\234\001\041\001\182\255\250\255\000\000\000\000\000\000\000\000\
\216\000\000\000\246\255\068\000\167\255\003\001\000\000\000\000\
\000\000\220\000\075\255\224\000\091\001\000\000\067\001\000\000\
\000\000\211\000\072\001\061\255\000\000\014\001\068\001\000\000\
\000\000\026\001\000\000\243\255\000\000\093\001\117\001\071\001\
\073\001"

let yytablesize = 2319
let yytable = "\019\000\
\170\000\254\000\025\000\241\000\057\000\029\000\244\000\007\000\
\068\000\071\000\009\000\005\000\006\000\099\000\072\000\165\000\
\025\000\144\000\079\000\149\000\150\000\078\000\134\000\195\000\
\080\000\152\000\154\000\155\000\008\000\157\000\196\000\158\000\
\165\000\001\000\009\000\171\000\009\000\140\000\135\000\009\000\
\073\000\175\000\003\001\176\000\177\000\010\000\034\001\128\000\
\249\000\099\000\128\000\128\000\171\000\103\000\179\000\020\000\
\180\000\145\000\128\000\128\000\126\000\011\000\110\000\253\000\
\188\000\141\000\097\000\025\000\182\000\215\000\216\000\217\000\
\218\000\219\000\220\000\181\000\223\000\224\000\225\000\226\000\
\227\000\228\000\229\000\230\000\231\000\232\000\233\000\234\000\
\235\000\236\000\237\000\165\000\181\000\128\000\208\000\128\000\
\128\000\128\000\128\000\110\000\031\000\195\000\042\001\040\001\
\033\000\044\001\183\000\110\000\196\000\074\000\209\000\171\000\
\118\000\100\000\028\000\254\000\031\000\010\001\035\000\176\000\
\033\000\117\000\186\000\014\001\098\000\189\000\002\001\021\000\
\192\000\030\000\179\000\009\001\180\000\069\000\035\000\107\000\
\030\000\204\000\107\000\159\000\160\000\058\001\161\000\162\000\
\031\000\030\000\075\000\164\000\033\000\100\000\118\000\181\000\
\021\001\031\000\032\000\022\001\165\000\127\000\222\000\117\000\
\166\000\127\000\035\000\167\000\168\000\169\000\170\000\106\000\
\127\000\127\000\032\000\069\000\069\000\030\000\238\000\107\000\
\171\000\172\000\173\000\174\000\022\000\248\000\175\000\037\001\
\176\000\177\000\157\000\192\000\251\000\165\000\099\000\109\000\
\148\000\255\000\108\000\179\000\004\001\180\000\032\000\059\000\
\161\000\060\000\195\000\127\000\106\000\127\000\127\000\127\000\
\127\000\077\000\208\000\165\000\100\000\022\000\165\000\024\000\
\181\000\060\000\166\000\060\000\141\000\167\000\168\000\169\000\
\170\000\101\000\209\000\165\000\109\000\060\000\009\000\108\000\
\070\000\165\000\171\000\172\000\173\000\174\000\060\000\189\000\
\175\000\060\000\176\000\177\000\028\001\060\000\255\000\022\000\
\024\000\031\001\195\000\030\001\060\000\179\000\060\000\180\000\
\136\000\196\000\035\001\060\000\070\000\022\000\061\000\170\000\
\170\000\022\000\221\000\170\000\087\000\049\001\069\000\170\000\
\170\000\093\000\181\000\170\000\170\000\185\000\005\000\006\000\
\170\000\147\000\024\000\004\001\070\000\170\000\170\000\076\000\
\170\000\170\000\170\000\170\000\050\001\141\000\170\000\008\000\
\024\000\050\001\170\000\083\000\024\000\009\000\097\000\057\001\
\094\000\170\000\170\000\070\000\128\000\132\000\170\000\170\000\
\010\000\095\000\170\000\136\000\022\000\170\000\096\000\070\000\
\065\000\170\000\170\000\170\000\170\000\108\000\170\000\170\000\
\011\000\159\000\160\000\137\000\161\000\162\000\163\000\070\000\
\065\000\164\000\127\000\099\000\138\000\134\000\070\000\088\000\
\023\000\089\000\165\000\188\000\065\000\071\000\166\000\024\000\
\156\000\167\000\168\000\169\000\170\000\065\000\184\000\105\000\
\106\000\071\000\022\000\201\000\065\000\202\000\171\000\172\000\
\173\000\174\000\165\000\065\000\175\000\203\000\176\000\177\000\
\178\000\071\000\159\000\160\000\212\000\161\000\162\000\163\000\
\071\000\179\000\164\000\180\000\165\000\205\000\206\000\056\001\
\165\000\207\000\213\000\165\000\240\000\024\000\165\000\166\000\
\242\000\245\000\167\000\168\000\169\000\170\000\181\000\165\000\
\246\000\252\000\165\000\208\000\015\001\018\001\165\000\171\000\
\172\000\173\000\174\000\024\001\029\001\175\000\165\000\176\000\
\177\000\178\000\165\000\026\001\016\001\033\001\032\001\036\001\
\165\000\133\000\179\000\165\000\180\000\159\000\160\000\139\000\
\161\000\162\000\163\000\041\001\165\000\164\000\142\000\143\000\
\053\001\017\001\165\000\043\001\048\001\052\001\165\000\181\000\
\054\001\059\001\166\000\165\000\060\001\167\000\168\000\169\000\
\170\000\103\000\165\000\102\000\061\001\165\000\062\001\167\000\
\018\000\158\000\171\000\172\000\173\000\174\000\125\000\125\000\
\175\000\160\000\176\000\177\000\178\000\162\000\159\000\160\000\
\101\000\161\000\162\000\163\000\025\000\179\000\164\000\180\000\
\017\000\161\000\080\000\008\001\019\000\053\000\054\000\165\000\
\055\000\047\001\025\001\166\000\046\001\243\000\167\000\168\000\
\169\000\170\000\181\000\125\000\125\000\125\000\125\000\055\001\
\250\000\027\001\001\001\171\000\172\000\173\000\174\000\023\001\
\214\000\175\000\239\000\176\000\177\000\178\000\011\001\000\000\
\039\001\012\001\000\000\036\000\000\000\000\000\179\000\000\000\
\180\000\159\000\160\000\000\000\161\000\162\000\163\000\036\000\
\000\000\164\000\000\000\000\000\000\000\000\000\000\000\000\000\
\036\000\000\000\165\000\181\000\000\000\000\000\166\000\036\000\
\000\000\167\000\168\000\169\000\170\000\000\000\036\000\000\000\
\000\000\000\000\000\000\034\000\000\000\000\000\171\000\172\000\
\173\000\174\000\000\000\000\000\175\000\000\000\176\000\177\000\
\178\000\000\000\159\000\034\000\000\000\161\000\162\000\000\000\
\000\000\179\000\164\000\180\000\000\000\000\000\000\000\034\000\
\000\000\000\000\000\000\165\000\000\000\000\000\000\000\166\000\
\034\000\000\000\167\000\168\000\169\000\170\000\181\000\034\000\
\000\000\000\000\000\000\000\000\000\000\030\000\034\000\171\000\
\172\000\173\000\174\000\000\000\000\000\175\000\159\000\176\000\
\177\000\161\000\032\000\000\000\000\000\030\000\164\000\000\000\
\000\000\000\000\179\000\000\000\180\000\000\000\000\000\165\000\
\000\000\030\000\032\000\166\000\000\000\000\000\167\000\168\000\
\169\000\170\000\030\000\000\000\000\000\084\000\032\000\181\000\
\000\000\030\000\000\000\171\000\172\000\173\000\174\000\032\000\
\030\000\175\000\159\000\176\000\177\000\161\000\032\000\000\000\
\040\000\000\000\000\000\085\000\086\000\032\000\179\000\000\000\
\180\000\000\000\000\000\165\000\043\000\000\000\000\000\166\000\
\000\000\000\000\167\000\168\000\169\000\170\000\000\000\000\000\
\044\000\000\000\000\000\181\000\046\000\000\000\000\000\171\000\
\172\000\173\000\174\000\000\000\000\000\175\000\000\000\176\000\
\177\000\000\000\000\000\000\000\000\000\000\000\000\000\109\000\
\000\000\110\000\179\000\000\000\180\000\032\000\033\000\000\000\
\000\000\034\000\111\000\000\000\000\000\035\000\000\000\000\000\
\000\000\036\000\037\000\000\000\000\000\112\000\038\000\181\000\
\000\000\000\000\000\000\039\000\040\000\113\000\000\000\041\000\
\042\000\000\000\114\000\000\000\000\000\000\000\000\000\000\000\
\043\000\115\000\116\000\000\000\000\000\117\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\045\000\118\000\000\000\
\046\000\119\000\120\000\063\000\000\000\121\000\122\000\000\000\
\048\000\064\000\050\000\090\000\051\000\052\000\104\000\104\000\
\000\000\000\000\104\000\000\000\000\000\000\000\104\000\000\000\
\000\000\000\000\104\000\104\000\000\000\000\000\040\000\104\000\
\000\000\091\000\092\000\000\000\104\000\104\000\000\000\000\000\
\104\000\104\000\043\000\165\000\000\000\000\000\000\000\000\000\
\000\000\104\000\000\000\000\000\169\000\170\000\044\000\000\000\
\000\000\000\000\046\000\000\000\094\000\104\000\104\000\171\000\
\000\000\104\000\174\000\000\000\104\000\175\000\000\000\176\000\
\177\000\104\000\104\000\104\000\000\000\104\000\104\000\032\000\
\033\000\000\000\179\000\034\000\180\000\000\000\000\000\035\000\
\000\000\000\000\000\000\036\000\037\000\000\000\000\000\000\000\
\038\000\000\000\000\000\000\000\000\000\039\000\040\000\181\000\
\000\000\041\000\042\000\000\000\000\000\000\000\126\000\000\000\
\000\000\000\000\043\000\000\000\000\000\126\000\126\000\000\000\
\000\000\000\000\000\000\000\000\032\000\033\000\044\000\045\000\
\034\000\000\000\046\000\000\000\035\000\047\000\000\000\000\000\
\036\000\037\000\048\000\049\000\050\000\038\000\051\000\052\000\
\000\000\000\000\039\000\040\000\000\000\000\000\041\000\042\000\
\126\000\000\000\126\000\126\000\126\000\126\000\000\000\043\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\104\000\104\000\044\000\045\000\104\000\000\000\046\000\
\000\000\000\000\063\000\000\000\000\000\104\000\104\000\048\000\
\064\000\050\000\104\000\051\000\052\000\000\000\000\000\104\000\
\104\000\000\000\000\000\104\000\104\000\104\000\000\000\000\000\
\000\000\000\000\000\000\000\000\104\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\104\000\104\000\
\104\000\104\000\104\000\000\000\104\000\000\000\104\000\104\000\
\000\000\000\000\104\000\104\000\104\000\104\000\104\000\104\000\
\104\000\104\000\000\000\000\000\104\000\104\000\000\000\000\000\
\104\000\104\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\104\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\104\000\104\000\104\000\104\000\104\000\
\000\000\104\000\000\000\104\000\104\000\000\000\000\000\104\000\
\104\000\104\000\104\000\104\000\104\000\104\000\104\000\000\000\
\000\000\104\000\104\000\000\000\000\000\104\000\104\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\104\000\000\000\
\000\000\000\000\000\000\032\000\033\000\000\000\000\000\034\000\
\023\000\000\000\104\000\104\000\000\000\000\000\104\000\036\000\
\000\000\104\000\000\000\000\000\038\000\000\000\104\000\104\000\
\104\000\039\000\040\000\104\000\000\000\041\000\042\000\000\000\
\000\000\109\000\000\000\110\000\000\000\000\000\043\000\000\000\
\000\000\000\000\000\000\000\000\111\000\000\000\000\000\109\000\
\000\000\110\000\044\000\045\000\000\000\000\000\046\000\112\000\
\000\000\000\000\111\000\000\000\000\000\000\000\048\000\113\000\
\050\000\000\000\051\000\052\000\114\000\112\000\000\000\000\000\
\000\000\000\000\000\000\115\000\116\000\113\000\000\000\117\000\
\000\000\000\000\114\000\019\001\000\000\000\000\000\000\000\000\
\118\000\115\000\116\000\020\001\120\000\117\000\000\000\121\000\
\122\000\038\001\000\000\000\000\000\000\109\000\118\000\110\000\
\000\000\119\000\120\000\000\000\000\000\121\000\122\000\000\000\
\111\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\112\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\113\000\000\000\000\000\000\000\000\000\
\114\000\000\000\000\000\000\000\000\000\000\000\000\000\115\000\
\116\000\165\000\000\000\117\000\000\000\000\000\000\000\000\000\
\167\000\168\000\169\000\170\000\118\000\000\000\000\000\119\000\
\120\000\000\000\000\000\121\000\122\000\171\000\172\000\173\000\
\174\000\000\000\000\000\175\000\000\000\176\000\177\000\150\000\
\150\000\000\000\150\000\150\000\150\000\000\000\000\000\150\000\
\179\000\000\000\180\000\150\000\150\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\150\000\000\000\000\000\150\000\
\150\000\150\000\150\000\000\000\000\000\181\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\150\000\150\000\150\000\
\000\000\000\000\150\000\000\000\150\000\150\000\150\000\000\000\
\150\000\150\000\150\000\150\000\000\000\000\000\000\000\150\000\
\000\000\150\000\148\000\148\000\000\000\148\000\148\000\148\000\
\000\000\000\000\148\000\000\000\000\000\000\000\148\000\148\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\148\000\
\000\000\000\000\148\000\148\000\148\000\148\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\148\000\148\000\148\000\000\000\000\000\148\000\000\000\148\000\
\148\000\148\000\000\000\148\000\148\000\148\000\148\000\000\000\
\000\000\000\000\148\000\000\000\148\000\146\000\146\000\000\000\
\146\000\146\000\146\000\000\000\000\000\146\000\000\000\000\000\
\000\000\146\000\146\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\146\000\000\000\000\000\146\000\146\000\146\000\
\146\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\146\000\146\000\146\000\000\000\000\000\
\146\000\000\000\146\000\146\000\146\000\000\000\146\000\146\000\
\146\000\146\000\000\000\000\000\000\000\146\000\000\000\146\000\
\145\000\145\000\000\000\145\000\145\000\145\000\000\000\000\000\
\145\000\000\000\000\000\000\000\145\000\145\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\145\000\000\000\000\000\
\145\000\145\000\145\000\145\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\145\000\145\000\
\145\000\000\000\000\000\145\000\000\000\145\000\145\000\145\000\
\000\000\145\000\145\000\145\000\145\000\000\000\000\000\000\000\
\145\000\000\000\145\000\149\000\149\000\000\000\149\000\149\000\
\149\000\000\000\000\000\149\000\000\000\000\000\000\000\149\000\
\149\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\149\000\000\000\000\000\149\000\149\000\149\000\149\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\149\000\149\000\149\000\000\000\000\000\149\000\000\000\
\149\000\149\000\149\000\000\000\149\000\149\000\149\000\149\000\
\000\000\000\000\000\000\149\000\000\000\149\000\147\000\147\000\
\000\000\147\000\147\000\147\000\000\000\000\000\147\000\000\000\
\000\000\000\000\147\000\147\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\147\000\000\000\000\000\147\000\147\000\
\147\000\147\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\147\000\147\000\147\000\000\000\
\000\000\147\000\000\000\147\000\147\000\147\000\000\000\147\000\
\147\000\147\000\147\000\000\000\000\000\000\000\147\000\000\000\
\147\000\144\000\144\000\000\000\144\000\144\000\144\000\000\000\
\000\000\144\000\000\000\000\000\000\000\144\000\144\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\144\000\000\000\
\000\000\144\000\144\000\144\000\144\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\
\144\000\144\000\000\000\000\000\144\000\000\000\144\000\144\000\
\144\000\000\000\144\000\144\000\144\000\144\000\000\000\000\000\
\000\000\144\000\000\000\144\000\143\000\143\000\000\000\143\000\
\143\000\143\000\000\000\000\000\143\000\000\000\000\000\000\000\
\143\000\143\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\143\000\000\000\000\000\143\000\143\000\143\000\143\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\143\000\143\000\143\000\000\000\000\000\143\000\
\000\000\143\000\143\000\143\000\000\000\143\000\143\000\143\000\
\143\000\000\000\000\000\000\000\143\000\000\000\143\000\142\000\
\142\000\000\000\142\000\142\000\142\000\000\000\000\000\142\000\
\000\000\000\000\000\000\142\000\142\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\142\000\000\000\000\000\142\000\
\142\000\142\000\142\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\142\000\142\000\142\000\
\000\000\000\000\142\000\000\000\142\000\142\000\142\000\000\000\
\142\000\142\000\142\000\142\000\000\000\000\000\000\000\142\000\
\000\000\142\000\151\000\151\000\000\000\151\000\151\000\151\000\
\000\000\000\000\151\000\000\000\000\000\000\000\151\000\151\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\151\000\
\000\000\000\000\151\000\151\000\151\000\151\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\151\000\151\000\151\000\000\000\000\000\151\000\000\000\151\000\
\151\000\151\000\000\000\151\000\151\000\151\000\151\000\000\000\
\000\000\000\000\151\000\000\000\151\000\141\000\141\000\000\000\
\141\000\141\000\141\000\000\000\000\000\141\000\000\000\000\000\
\000\000\141\000\141\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\141\000\000\000\000\000\141\000\141\000\141\000\
\141\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\141\000\141\000\141\000\000\000\000\000\
\141\000\000\000\000\000\141\000\141\000\000\000\141\000\141\000\
\141\000\141\000\140\000\140\000\000\000\140\000\140\000\140\000\
\000\000\000\000\140\000\000\000\000\000\000\000\140\000\140\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\140\000\
\000\000\000\000\140\000\140\000\140\000\140\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\140\000\140\000\140\000\000\000\000\000\140\000\000\000\000\000\
\140\000\140\000\000\000\140\000\140\000\140\000\140\000\138\000\
\138\000\000\000\138\000\138\000\138\000\000\000\000\000\138\000\
\000\000\000\000\000\000\138\000\138\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\138\000\000\000\000\000\138\000\
\138\000\138\000\138\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\138\000\138\000\138\000\
\000\000\000\000\000\000\000\000\000\000\000\000\138\000\000\000\
\138\000\138\000\138\000\138\000\139\000\139\000\000\000\139\000\
\139\000\139\000\000\000\000\000\139\000\000\000\000\000\000\000\
\139\000\139\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\139\000\000\000\000\000\139\000\139\000\139\000\139\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\139\000\139\000\139\000\000\000\000\000\000\000\
\000\000\000\000\000\000\139\000\000\000\139\000\139\000\139\000\
\139\000\137\000\137\000\000\000\137\000\137\000\137\000\000\000\
\000\000\137\000\000\000\000\000\000\000\137\000\137\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\137\000\000\000\
\000\000\137\000\137\000\137\000\137\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\137\000\
\137\000\137\000\000\000\000\000\000\000\000\000\000\000\000\000\
\137\000\000\000\137\000\137\000\137\000\137\000\134\000\134\000\
\000\000\134\000\134\000\134\000\136\000\136\000\134\000\136\000\
\136\000\136\000\134\000\134\000\136\000\000\000\000\000\000\000\
\136\000\136\000\000\000\134\000\000\000\000\000\134\000\134\000\
\000\000\136\000\000\000\000\000\136\000\136\000\000\000\000\000\
\000\000\000\000\000\000\000\000\134\000\134\000\000\000\000\000\
\000\000\000\000\136\000\136\000\000\000\134\000\000\000\134\000\
\134\000\134\000\134\000\136\000\000\000\136\000\136\000\136\000\
\136\000\133\000\133\000\000\000\133\000\133\000\133\000\135\000\
\135\000\133\000\135\000\135\000\135\000\133\000\133\000\135\000\
\000\000\000\000\000\000\135\000\135\000\000\000\133\000\000\000\
\000\000\133\000\133\000\000\000\135\000\000\000\000\000\135\000\
\135\000\000\000\000\000\000\000\000\000\000\000\000\000\133\000\
\133\000\000\000\000\000\000\000\000\000\135\000\135\000\000\000\
\133\000\000\000\133\000\133\000\133\000\133\000\135\000\000\000\
\135\000\135\000\135\000\135\000\132\000\132\000\000\000\132\000\
\132\000\132\000\131\000\131\000\132\000\131\000\131\000\131\000\
\132\000\132\000\131\000\000\000\000\000\000\000\131\000\131\000\
\000\000\132\000\000\000\000\000\130\000\130\000\000\000\131\000\
\130\000\130\000\000\000\129\000\130\000\000\000\129\000\129\000\
\130\000\130\000\129\000\000\000\000\000\000\000\129\000\129\000\
\000\000\000\000\000\000\132\000\000\000\132\000\132\000\132\000\
\132\000\131\000\000\000\131\000\131\000\131\000\131\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\130\000\000\000\130\000\130\000\130\000\
\130\000\129\000\000\000\129\000\129\000\129\000\129\000"

let yycheck = "\005\000\
\000\000\197\000\009\000\185\000\015\000\011\000\188\000\000\000\
\019\000\023\000\038\001\015\001\016\001\014\001\043\001\018\001\
\023\000\013\001\029\000\109\000\110\000\028\000\037\001\010\001\
\035\000\115\000\116\000\117\000\032\001\119\000\017\001\121\000\
\018\001\001\000\038\001\038\001\038\001\031\001\053\001\038\001\
\069\001\044\001\070\001\046\001\047\001\049\001\050\001\002\001\
\050\001\050\001\005\001\006\001\038\001\060\000\057\001\043\001\
\059\001\053\001\013\001\014\001\074\000\065\001\014\001\050\001\
\014\001\059\001\015\001\074\000\014\001\159\000\160\000\161\000\
\162\000\163\000\164\000\078\001\166\000\167\000\168\000\169\000\
\170\000\171\000\172\000\173\000\174\000\175\000\176\000\177\000\
\178\000\179\000\180\000\018\001\078\001\048\001\043\001\050\001\
\051\001\052\001\053\001\051\001\015\001\010\001\028\001\053\001\
\015\001\031\001\052\001\059\001\017\001\014\001\059\001\038\001\
\014\001\014\001\043\001\055\001\031\001\207\000\015\001\046\001\
\031\001\014\001\129\000\213\000\057\000\132\000\201\000\060\001\
\134\000\015\001\057\001\206\000\059\001\014\001\031\001\068\000\
\053\001\144\000\014\001\001\001\002\001\050\001\004\001\005\001\
\059\001\031\001\051\001\009\001\059\001\050\001\052\001\078\001\
\242\000\053\001\015\001\245\000\018\001\002\001\165\000\052\001\
\022\001\006\001\059\001\025\001\026\001\027\001\028\001\014\001\
\013\001\014\001\031\001\052\001\053\001\059\001\181\000\051\001\
\038\001\039\001\040\001\041\001\031\001\192\000\044\001\017\001\
\046\001\047\001\020\001\193\000\195\000\015\001\033\001\014\001\
\031\001\199\000\014\001\057\001\202\000\059\001\059\001\053\001\
\004\001\015\001\010\001\048\001\051\001\050\001\051\001\052\001\
\053\001\060\001\043\001\037\001\055\001\031\001\018\001\066\001\
\078\001\031\001\022\001\033\001\059\001\025\001\026\001\027\001\
\028\001\068\001\059\001\053\001\051\001\043\001\038\001\051\001\
\031\001\059\001\038\001\039\001\040\001\041\001\052\001\246\000\
\044\001\055\001\046\001\047\001\255\000\059\001\252\000\031\001\
\066\001\004\001\010\001\002\001\066\001\057\001\068\001\059\001\
\037\001\017\001\009\001\035\001\059\001\031\001\053\001\007\001\
\008\001\031\001\036\001\011\001\045\000\053\001\060\001\015\001\
\016\001\050\000\078\001\019\001\020\001\043\001\015\001\016\001\
\024\001\062\001\066\001\033\001\053\001\029\001\030\001\059\001\
\032\001\033\001\034\001\035\001\043\001\059\001\038\001\032\001\
\066\001\048\001\042\001\042\001\066\001\038\001\015\001\054\001\
\053\001\049\001\050\001\031\001\014\001\037\001\054\001\055\001\
\049\001\053\001\058\001\037\001\031\001\061\001\053\001\043\001\
\015\001\065\001\066\001\067\001\068\001\052\001\070\001\071\001\
\065\001\001\001\002\001\053\001\004\001\005\001\006\001\059\001\
\031\001\009\001\052\001\033\001\062\001\037\001\066\001\047\000\
\059\001\049\000\018\001\014\001\043\001\031\001\022\001\066\001\
\043\001\025\001\026\001\027\001\028\001\052\001\060\001\063\000\
\064\000\043\001\031\001\043\001\059\001\043\001\038\001\039\001\
\040\001\041\001\015\001\066\001\044\001\015\001\046\001\047\001\
\048\001\059\001\001\001\002\001\052\001\004\001\005\001\006\001\
\066\001\057\001\009\001\059\001\015\001\037\001\043\001\060\001\
\037\001\021\001\052\001\018\001\052\001\066\001\043\001\022\001\
\038\001\021\001\025\001\026\001\027\001\028\001\078\001\052\001\
\014\001\013\001\037\001\043\001\052\001\052\001\059\001\038\001\
\039\001\040\001\041\001\050\001\053\001\044\001\015\001\046\001\
\047\001\048\001\053\001\013\001\051\001\014\001\052\001\052\001\
\059\001\087\000\057\001\062\001\059\001\001\001\002\001\093\000\
\004\001\005\001\006\001\053\001\037\001\009\001\100\000\101\000\
\037\001\013\001\043\001\052\001\052\001\049\001\018\001\078\001\
\043\001\052\001\022\001\052\001\014\001\025\001\026\001\027\001\
\028\001\035\001\059\001\050\001\060\001\062\001\052\001\037\001\
\053\001\052\001\038\001\039\001\040\001\041\001\013\001\014\001\
\044\001\052\001\046\001\047\001\048\001\052\001\001\001\002\001\
\050\001\004\001\005\001\006\001\052\001\057\001\009\001\059\001\
\053\001\052\001\037\001\205\000\053\001\015\000\015\000\018\001\
\015\000\034\001\248\000\022\001\033\001\187\000\025\001\026\001\
\027\001\028\001\078\001\050\001\051\001\052\001\053\001\053\001\
\193\000\252\000\199\000\038\001\039\001\040\001\041\001\246\000\
\156\000\044\001\182\000\046\001\047\001\048\001\208\000\255\255\
\051\001\209\000\255\255\031\001\255\255\255\255\057\001\255\255\
\059\001\001\001\002\001\255\255\004\001\005\001\006\001\043\001\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\052\001\255\255\018\001\078\001\255\255\255\255\022\001\059\001\
\255\255\025\001\026\001\027\001\028\001\255\255\066\001\255\255\
\255\255\255\255\255\255\015\001\255\255\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\044\001\255\255\046\001\047\001\
\048\001\255\255\001\001\031\001\255\255\004\001\005\001\255\255\
\255\255\057\001\009\001\059\001\255\255\255\255\255\255\043\001\
\255\255\255\255\255\255\018\001\255\255\255\255\255\255\022\001\
\052\001\255\255\025\001\026\001\027\001\028\001\078\001\059\001\
\255\255\255\255\255\255\255\255\255\255\015\001\066\001\038\001\
\039\001\040\001\041\001\255\255\255\255\044\001\001\001\046\001\
\047\001\004\001\015\001\255\255\255\255\031\001\009\001\255\255\
\255\255\255\255\057\001\255\255\059\001\255\255\255\255\018\001\
\255\255\043\001\031\001\022\001\255\255\255\255\025\001\026\001\
\027\001\028\001\052\001\255\255\255\255\011\001\043\001\078\001\
\255\255\059\001\255\255\038\001\039\001\040\001\041\001\052\001\
\066\001\044\001\001\001\046\001\047\001\004\001\059\001\255\255\
\030\001\255\255\255\255\033\001\034\001\066\001\057\001\255\255\
\059\001\255\255\255\255\018\001\042\001\255\255\255\255\022\001\
\255\255\255\255\025\001\026\001\027\001\028\001\255\255\255\255\
\054\001\255\255\255\255\078\001\058\001\255\255\255\255\038\001\
\039\001\040\001\041\001\255\255\255\255\044\001\255\255\046\001\
\047\001\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\003\001\057\001\255\255\059\001\007\001\008\001\255\255\
\255\255\011\001\012\001\255\255\255\255\015\001\255\255\255\255\
\255\255\019\001\020\001\255\255\255\255\023\001\024\001\078\001\
\255\255\255\255\255\255\029\001\030\001\031\001\255\255\033\001\
\034\001\255\255\036\001\255\255\255\255\255\255\255\255\255\255\
\042\001\043\001\044\001\255\255\255\255\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\054\001\055\001\056\001\255\255\
\058\001\059\001\060\001\061\001\255\255\063\001\064\001\255\255\
\066\001\067\001\068\001\011\001\070\001\071\001\007\001\008\001\
\255\255\255\255\011\001\255\255\255\255\255\255\015\001\255\255\
\255\255\255\255\019\001\020\001\255\255\255\255\030\001\024\001\
\255\255\033\001\034\001\255\255\029\001\030\001\255\255\255\255\
\033\001\034\001\042\001\018\001\255\255\255\255\255\255\255\255\
\255\255\042\001\255\255\255\255\027\001\028\001\054\001\255\255\
\255\255\255\255\058\001\255\255\053\001\054\001\055\001\038\001\
\255\255\058\001\041\001\255\255\061\001\044\001\255\255\046\001\
\047\001\066\001\067\001\068\001\255\255\070\001\071\001\007\001\
\008\001\255\255\057\001\011\001\059\001\255\255\255\255\015\001\
\255\255\255\255\255\255\019\001\020\001\255\255\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\029\001\030\001\078\001\
\255\255\033\001\034\001\255\255\255\255\255\255\006\001\255\255\
\255\255\255\255\042\001\255\255\255\255\013\001\014\001\255\255\
\255\255\255\255\255\255\255\255\007\001\008\001\054\001\055\001\
\011\001\255\255\058\001\255\255\015\001\061\001\255\255\255\255\
\019\001\020\001\066\001\067\001\068\001\024\001\070\001\071\001\
\255\255\255\255\029\001\030\001\255\255\255\255\033\001\034\001\
\048\001\255\255\050\001\051\001\052\001\053\001\255\255\042\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\007\001\008\001\054\001\055\001\011\001\255\255\058\001\
\255\255\255\255\061\001\255\255\255\255\019\001\020\001\066\001\
\067\001\068\001\024\001\070\001\071\001\255\255\255\255\029\001\
\030\001\255\255\255\255\033\001\034\001\035\001\255\255\255\255\
\255\255\255\255\255\255\255\255\042\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\007\001\008\001\
\054\001\055\001\011\001\255\255\058\001\255\255\015\001\061\001\
\255\255\255\255\019\001\020\001\066\001\067\001\068\001\024\001\
\070\001\071\001\255\255\255\255\029\001\030\001\255\255\255\255\
\033\001\034\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\042\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\007\001\008\001\054\001\055\001\011\001\
\255\255\058\001\255\255\015\001\061\001\255\255\255\255\019\001\
\020\001\066\001\067\001\068\001\024\001\070\001\071\001\255\255\
\255\255\029\001\030\001\255\255\255\255\033\001\034\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\042\001\255\255\
\255\255\255\255\255\255\007\001\008\001\255\255\255\255\011\001\
\052\001\255\255\054\001\055\001\255\255\255\255\058\001\019\001\
\255\255\061\001\255\255\255\255\024\001\255\255\066\001\067\001\
\068\001\029\001\030\001\071\001\255\255\033\001\034\001\255\255\
\255\255\001\001\255\255\003\001\255\255\255\255\042\001\255\255\
\255\255\255\255\255\255\255\255\012\001\255\255\255\255\001\001\
\255\255\003\001\054\001\055\001\255\255\255\255\058\001\023\001\
\255\255\255\255\012\001\255\255\255\255\255\255\066\001\031\001\
\068\001\255\255\070\001\071\001\036\001\023\001\255\255\255\255\
\255\255\255\255\255\255\043\001\044\001\031\001\255\255\047\001\
\255\255\255\255\036\001\051\001\255\255\255\255\255\255\255\255\
\056\001\043\001\044\001\059\001\060\001\047\001\255\255\063\001\
\064\001\051\001\255\255\255\255\255\255\001\001\056\001\003\001\
\255\255\059\001\060\001\255\255\255\255\063\001\064\001\255\255\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\255\255\255\255\255\255\255\255\
\036\001\255\255\255\255\255\255\255\255\255\255\255\255\043\001\
\044\001\018\001\255\255\047\001\255\255\255\255\255\255\255\255\
\025\001\026\001\027\001\028\001\056\001\255\255\255\255\059\001\
\060\001\255\255\255\255\063\001\064\001\038\001\039\001\040\001\
\041\001\255\255\255\255\044\001\255\255\046\001\047\001\001\001\
\002\001\255\255\004\001\005\001\006\001\255\255\255\255\009\001\
\057\001\255\255\059\001\013\001\014\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\022\001\255\255\255\255\025\001\
\026\001\027\001\028\001\255\255\255\255\078\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\039\001\040\001\041\001\
\255\255\255\255\044\001\255\255\046\001\047\001\048\001\255\255\
\050\001\051\001\052\001\053\001\255\255\255\255\255\255\057\001\
\255\255\059\001\001\001\002\001\255\255\004\001\005\001\006\001\
\255\255\255\255\009\001\255\255\255\255\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\022\001\
\255\255\255\255\025\001\026\001\027\001\028\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\039\001\040\001\041\001\255\255\255\255\044\001\255\255\046\001\
\047\001\048\001\255\255\050\001\051\001\052\001\053\001\255\255\
\255\255\255\255\057\001\255\255\059\001\001\001\002\001\255\255\
\004\001\005\001\006\001\255\255\255\255\009\001\255\255\255\255\
\255\255\013\001\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\255\255\255\255\025\001\026\001\027\001\
\028\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\039\001\040\001\041\001\255\255\255\255\
\044\001\255\255\046\001\047\001\048\001\255\255\050\001\051\001\
\052\001\053\001\255\255\255\255\255\255\057\001\255\255\059\001\
\001\001\002\001\255\255\004\001\005\001\006\001\255\255\255\255\
\009\001\255\255\255\255\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\022\001\255\255\255\255\
\025\001\026\001\027\001\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\039\001\040\001\
\041\001\255\255\255\255\044\001\255\255\046\001\047\001\048\001\
\255\255\050\001\051\001\052\001\053\001\255\255\255\255\255\255\
\057\001\255\255\059\001\001\001\002\001\255\255\004\001\005\001\
\006\001\255\255\255\255\009\001\255\255\255\255\255\255\013\001\
\014\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\022\001\255\255\255\255\025\001\026\001\027\001\028\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\039\001\040\001\041\001\255\255\255\255\044\001\255\255\
\046\001\047\001\048\001\255\255\050\001\051\001\052\001\053\001\
\255\255\255\255\255\255\057\001\255\255\059\001\001\001\002\001\
\255\255\004\001\005\001\006\001\255\255\255\255\009\001\255\255\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\022\001\255\255\255\255\025\001\026\001\
\027\001\028\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\039\001\040\001\041\001\255\255\
\255\255\044\001\255\255\046\001\047\001\048\001\255\255\050\001\
\051\001\052\001\053\001\255\255\255\255\255\255\057\001\255\255\
\059\001\001\001\002\001\255\255\004\001\005\001\006\001\255\255\
\255\255\009\001\255\255\255\255\255\255\013\001\014\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\255\255\
\255\255\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\039\001\
\040\001\041\001\255\255\255\255\044\001\255\255\046\001\047\001\
\048\001\255\255\050\001\051\001\052\001\053\001\255\255\255\255\
\255\255\057\001\255\255\059\001\001\001\002\001\255\255\004\001\
\005\001\006\001\255\255\255\255\009\001\255\255\255\255\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\022\001\255\255\255\255\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\039\001\040\001\041\001\255\255\255\255\044\001\
\255\255\046\001\047\001\048\001\255\255\050\001\051\001\052\001\
\053\001\255\255\255\255\255\255\057\001\255\255\059\001\001\001\
\002\001\255\255\004\001\005\001\006\001\255\255\255\255\009\001\
\255\255\255\255\255\255\013\001\014\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\022\001\255\255\255\255\025\001\
\026\001\027\001\028\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\039\001\040\001\041\001\
\255\255\255\255\044\001\255\255\046\001\047\001\048\001\255\255\
\050\001\051\001\052\001\053\001\255\255\255\255\255\255\057\001\
\255\255\059\001\001\001\002\001\255\255\004\001\005\001\006\001\
\255\255\255\255\009\001\255\255\255\255\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\022\001\
\255\255\255\255\025\001\026\001\027\001\028\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\039\001\040\001\041\001\255\255\255\255\044\001\255\255\046\001\
\047\001\048\001\255\255\050\001\051\001\052\001\053\001\255\255\
\255\255\255\255\057\001\255\255\059\001\001\001\002\001\255\255\
\004\001\005\001\006\001\255\255\255\255\009\001\255\255\255\255\
\255\255\013\001\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\255\255\255\255\025\001\026\001\027\001\
\028\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\039\001\040\001\041\001\255\255\255\255\
\044\001\255\255\255\255\047\001\048\001\255\255\050\001\051\001\
\052\001\053\001\001\001\002\001\255\255\004\001\005\001\006\001\
\255\255\255\255\009\001\255\255\255\255\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\022\001\
\255\255\255\255\025\001\026\001\027\001\028\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\039\001\040\001\041\001\255\255\255\255\044\001\255\255\255\255\
\047\001\048\001\255\255\050\001\051\001\052\001\053\001\001\001\
\002\001\255\255\004\001\005\001\006\001\255\255\255\255\009\001\
\255\255\255\255\255\255\013\001\014\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\022\001\255\255\255\255\025\001\
\026\001\027\001\028\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\039\001\040\001\041\001\
\255\255\255\255\255\255\255\255\255\255\255\255\048\001\255\255\
\050\001\051\001\052\001\053\001\001\001\002\001\255\255\004\001\
\005\001\006\001\255\255\255\255\009\001\255\255\255\255\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\022\001\255\255\255\255\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\039\001\040\001\041\001\255\255\255\255\255\255\
\255\255\255\255\255\255\048\001\255\255\050\001\051\001\052\001\
\053\001\001\001\002\001\255\255\004\001\005\001\006\001\255\255\
\255\255\009\001\255\255\255\255\255\255\013\001\014\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\255\255\
\255\255\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\048\001\255\255\050\001\051\001\052\001\053\001\001\001\002\001\
\255\255\004\001\005\001\006\001\001\001\002\001\009\001\004\001\
\005\001\006\001\013\001\014\001\009\001\255\255\255\255\255\255\
\013\001\014\001\255\255\022\001\255\255\255\255\025\001\026\001\
\255\255\022\001\255\255\255\255\025\001\026\001\255\255\255\255\
\255\255\255\255\255\255\255\255\039\001\040\001\255\255\255\255\
\255\255\255\255\039\001\040\001\255\255\048\001\255\255\050\001\
\051\001\052\001\053\001\048\001\255\255\050\001\051\001\052\001\
\053\001\001\001\002\001\255\255\004\001\005\001\006\001\001\001\
\002\001\009\001\004\001\005\001\006\001\013\001\014\001\009\001\
\255\255\255\255\255\255\013\001\014\001\255\255\022\001\255\255\
\255\255\025\001\026\001\255\255\022\001\255\255\255\255\025\001\
\026\001\255\255\255\255\255\255\255\255\255\255\255\255\039\001\
\040\001\255\255\255\255\255\255\255\255\039\001\040\001\255\255\
\048\001\255\255\050\001\051\001\052\001\053\001\048\001\255\255\
\050\001\051\001\052\001\053\001\001\001\002\001\255\255\004\001\
\005\001\006\001\001\001\002\001\009\001\004\001\005\001\006\001\
\013\001\014\001\009\001\255\255\255\255\255\255\013\001\014\001\
\255\255\022\001\255\255\255\255\001\001\002\001\255\255\022\001\
\005\001\006\001\255\255\002\001\009\001\255\255\005\001\006\001\
\013\001\014\001\009\001\255\255\255\255\255\255\013\001\014\001\
\255\255\255\255\255\255\048\001\255\255\050\001\051\001\052\001\
\053\001\048\001\255\255\050\001\051\001\052\001\053\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\048\001\255\255\050\001\051\001\052\001\
\053\001\048\001\255\255\050\001\051\001\052\001\053\001"

let yynames_const = "\
  AMPER\000\
  AMPERAMPER\000\
  BANG\000\
  BANGEQUAL\000\
  BAR\000\
  BARBAR\000\
  BOOLEAN\000\
  BYTE\000\
  CARET\000\
  CASE\000\
  CHAR\000\
  COLON\000\
  COMMA\000\
  CONST\000\
  CPP_QUOTE\000\
  DEFAULT\000\
  DOT\000\
  DOUBLE\000\
  ENUM\000\
  EOF\000\
  EQUAL\000\
  EQUALEQUAL\000\
  FALSE\000\
  FLOAT\000\
  GREATER\000\
  GREATEREQUAL\000\
  GREATERGREATER\000\
  GREATERGREATERGREATER\000\
  HANDLE_T\000\
  HYPER\000\
  IMPORT\000\
  INT\000\
  INT64\000\
  INTERFACE\000\
  LBRACE\000\
  LBRACKET\000\
  LESS\000\
  LESSEQUAL\000\
  LESSLESS\000\
  LONG\000\
  LPAREN\000\
  MINUS\000\
  NULL\000\
  PERCENT\000\
  PLUS\000\
  QUESTIONMARK\000\
  QUOTE\000\
  RBRACE\000\
  RBRACKET\000\
  RPAREN\000\
  SEMI\000\
  SHORT\000\
  SIGNED\000\
  SIZEOF\000\
  SLASH\000\
  SMALL\000\
  STAR\000\
  STRUCT\000\
  SWITCH\000\
  TILDE\000\
  TRUE\000\
  TYPEDEF\000\
  UNION\000\
  UNSIGNED\000\
  VOID\000\
  WCHAR_T\000\
  "

let yynames_block = "\
  CHARACTER\000\
  IDENT\000\
  INTEGER\000\
  STRING\000\
  TYPEIDENT\000\
  UUID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'component_list) in
    Obj.repr(
# 132 "parser_midl.mly"
        ( List.rev _1 )
# 1032 "parser_midl.ml"
               : File.components))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "parser_midl.mly"
        ( [] )
# 1038 "parser_midl.ml"
               : 'component_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'component_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'component) in
    Obj.repr(
# 141 "parser_midl.mly"
        ( _2 @ _1 )
# 1046 "parser_midl.ml"
               : 'component_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'const_decl) in
    Obj.repr(
# 146 "parser_midl.mly"
        ( [Comp_constdecl _1] )
# 1053 "parser_midl.ml"
               : 'component))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_decl) in
    Obj.repr(
# 148 "parser_midl.mly"
        ( List.map (fun td -> Comp_typedecl td) (List.rev _1) )
# 1060 "parser_midl.ml"
               : 'component))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'struct_declarator) in
    Obj.repr(
# 152 "parser_midl.mly"
        ( [Comp_structdecl _2] )
# 1068 "parser_midl.ml"
               : 'component))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'union_declarator) in
    Obj.repr(
# 154 "parser_midl.mly"
        ( [Comp_uniondecl _2] )
# 1076 "parser_midl.ml"
               : 'component))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'enum_declarator) in
    Obj.repr(
# 156 "parser_midl.mly"
        ( [Comp_enumdecl _2] )
# 1084 "parser_midl.ml"
               : 'component))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_ident) in
    Obj.repr(
# 158 "parser_midl.mly"
        ( [Comp_structdecl {sd_name = _3; sd_mod = "";
                            sd_stamp = 0; sd_fields = []}] )
# 1093 "parser_midl.ml"
               : 'component))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'opt_ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'simple_type_spec) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'ident) in
    Obj.repr(
# 161 "parser_midl.mly"
        ( [Comp_structdecl {sd_name = _3; sd_mod = "";
                            sd_stamp = 0; sd_fields = []}] )
# 1104 "parser_midl.ml"
               : 'component))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_ident) in
    Obj.repr(
# 164 "parser_midl.mly"
        ( [Comp_uniondecl {ud_name = _3; ud_mod = "";
                           ud_stamp = 0; ud_cases = []}] )
# 1113 "parser_midl.ml"
               : 'component))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fun_decl) in
    Obj.repr(
# 167 "parser_midl.mly"
        ( [Comp_fundecl _1] )
# 1120 "parser_midl.ml"
               : 'component))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'interface_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'tydef_ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'opt_superinterface) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'component_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'opt_semi) in
    Obj.repr(
# 172 "parser_midl.mly"
        ( let i = make_interface _3 _1 _4 (List.rev _6) in
          restore_defaults(); i )
# 1132 "parser_midl.ml"
               : 'component))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'interface_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tydef_ident) in
    Obj.repr(
# 175 "parser_midl.mly"
        ( let i = [make_forward_interface _3] in
          restore_defaults(); i )
# 1141 "parser_midl.ml"
               : 'component))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 178 "parser_midl.mly"
        ( read_import _2 )
# 1148 "parser_midl.ml"
               : 'component))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'quote) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_semi) in
    Obj.repr(
# 180 "parser_midl.mly"
        ( let (kind, txt) = make_diversion _1 in [Comp_diversion(kind, txt)] )
# 1156 "parser_midl.ml"
               : 'component))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'type_spec) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pointer_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 187 "parser_midl.mly"
        ( make_const_decl _2 (_4 _3) _5 _7 )
# 1167 "parser_midl.ml"
               : 'const_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_spec) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'declarators) in
    Obj.repr(
# 195 "parser_midl.mly"
        ( make_typedef _2 _3 (List.rev _4) )
# 1176 "parser_midl.ml"
               : 'type_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'attributes) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'type_spec) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pointer_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'param_list_declarator) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'opt_quotes) in
    Obj.repr(
# 205 "parser_midl.mly"
        ( make_fun_declaration _1 (_3 _2) _4 _6 _8 )
# 1188 "parser_midl.ml"
               : 'fun_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'opt_quotes) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 209 "parser_midl.mly"
        ( ("call", _4) :: _1 )
# 1196 "parser_midl.ml"
               : 'opt_quotes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'opt_quotes) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 211 "parser_midl.mly"
        ( (_4, _6) :: _1 )
# 1205 "parser_midl.ml"
               : 'opt_quotes))
; (fun __caml_parser_env ->
    Obj.repr(
# 213 "parser_midl.mly"
        ( [] )
# 1211 "parser_midl.ml"
               : 'opt_quotes))
; (fun __caml_parser_env ->
    Obj.repr(
# 220 "parser_midl.mly"
        ( [] )
# 1217 "parser_midl.ml"
               : 'param_list_declarator))
; (fun __caml_parser_env ->
    Obj.repr(
# 222 "parser_midl.mly"
        ( [] )
# 1223 "parser_midl.ml"
               : 'param_list_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_declarators) in
    Obj.repr(
# 224 "parser_midl.mly"
        ( List.rev _1 )
# 1230 "parser_midl.ml"
               : 'param_list_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_declarator) in
    Obj.repr(
# 228 "parser_midl.mly"
        ( [_1] )
# 1237 "parser_midl.ml"
               : 'param_declarators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_declarators) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_declarator) in
    Obj.repr(
# 230 "parser_midl.mly"
        ( _3 :: _1 )
# 1245 "parser_midl.ml"
               : 'param_declarators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'type_spec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'declarator) in
    Obj.repr(
# 237 "parser_midl.mly"
        ( make_param _1 _2 _3 )
# 1254 "parser_midl.ml"
               : 'param_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_type_spec) in
    Obj.repr(
# 244 "parser_midl.mly"
        ( _1 )
# 1261 "parser_midl.ml"
               : 'type_spec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_ident) in
    Obj.repr(
# 246 "parser_midl.mly"
        ( Type_struct {sd_name=_2; sd_mod = ""; sd_stamp=0; sd_fields=[]} )
# 1268 "parser_midl.ml"
               : 'type_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'struct_declarator) in
    Obj.repr(
# 248 "parser_midl.mly"
        ( Type_struct _1 )
# 1275 "parser_midl.ml"
               : 'type_spec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_ident) in
    Obj.repr(
# 250 "parser_midl.mly"
        ( Type_union({ud_name=_2; ud_mod = ""; ud_stamp=0; ud_cases=[]},
                      no_switch) )
# 1283 "parser_midl.ml"
               : 'type_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'union_declarator) in
    Obj.repr(
# 253 "parser_midl.mly"
        ( Type_union(_1, no_switch) )
# 1290 "parser_midl.ml"
               : 'type_spec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_ident) in
    Obj.repr(
# 255 "parser_midl.mly"
        ( Type_enum({en_name=_2; en_mod = ""; en_stamp=0; en_consts=[]},
                    no_enum_attr) )
# 1298 "parser_midl.ml"
               : 'type_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enum_declarator) in
    Obj.repr(
# 258 "parser_midl.mly"
        ( Type_enum(_1, no_enum_attr) )
# 1305 "parser_midl.ml"
               : 'type_spec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_spec) in
    Obj.repr(
# 260 "parser_midl.mly"
        ( make_type_const _2 )
# 1312 "parser_midl.ml"
               : 'type_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_spec) in
    Obj.repr(
# 262 "parser_midl.mly"
        ( make_type_const _1 )
# 1319 "parser_midl.ml"
               : 'type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 266 "parser_midl.mly"
                                                ( Type_float )
# 1325 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 267 "parser_midl.mly"
                                                ( Type_double )
# 1331 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "parser_midl.mly"
                                                ( make_int Int )
# 1337 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 269 "parser_midl.mly"
                                                ( make_int UInt )
# 1343 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 270 "parser_midl.mly"
                                                ( make_int Int )
# 1349 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'integer_size) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_int) in
    Obj.repr(
# 271 "parser_midl.mly"
                                                ( make_int _1 )
# 1357 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'integer_size) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_int) in
    Obj.repr(
# 272 "parser_midl.mly"
                                                ( make_unsigned _2 )
# 1365 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'integer_size) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_int) in
    Obj.repr(
# 273 "parser_midl.mly"
                                                ( make_unsigned _1 )
# 1373 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'integer_size) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_int) in
    Obj.repr(
# 274 "parser_midl.mly"
                                                ( make_signed _2 )
# 1381 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'integer_size) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_int) in
    Obj.repr(
# 275 "parser_midl.mly"
                                                ( make_signed _1 )
# 1389 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 276 "parser_midl.mly"
                                                ( make_int Char )
# 1395 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 277 "parser_midl.mly"
                                                ( make_int UChar )
# 1401 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 278 "parser_midl.mly"
                                                ( make_int SChar )
# 1407 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 279 "parser_midl.mly"
                                                ( make_int Boolean )
# 1413 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 280 "parser_midl.mly"
                                                ( make_int Byte )
# 1419 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 281 "parser_midl.mly"
                                                ( make_int Hyper )
# 1425 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 282 "parser_midl.mly"
                                                ( make_int UHyper )
# 1431 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 283 "parser_midl.mly"
                                                ( make_int Hyper )
# 1437 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 284 "parser_midl.mly"
                                                ( Type_void )
# 1443 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 285 "parser_midl.mly"
                                                ( Type_named("", _1) )
# 1450 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 286 "parser_midl.mly"
                                                ( wchar_t_type() )
# 1456 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 287 "parser_midl.mly"
                                                ( handle_t_type() )
# 1462 "parser_midl.ml"
               : 'simple_type_spec))
; (fun __caml_parser_env ->
    Obj.repr(
# 290 "parser_midl.mly"
                                                ( Long )
# 1468 "parser_midl.ml"
               : 'integer_size))
; (fun __caml_parser_env ->
    Obj.repr(
# 291 "parser_midl.mly"
                                                ( Small )
# 1474 "parser_midl.ml"
               : 'integer_size))
; (fun __caml_parser_env ->
    Obj.repr(
# 292 "parser_midl.mly"
                                                ( Short )
# 1480 "parser_midl.ml"
               : 'integer_size))
; (fun __caml_parser_env ->
    Obj.repr(
# 293 "parser_midl.mly"
                                                ( Hyper )
# 1486 "parser_midl.ml"
               : 'integer_size))
; (fun __caml_parser_env ->
    Obj.repr(
# 294 "parser_midl.mly"
                                                ( Hyper )
# 1492 "parser_midl.ml"
               : 'integer_size))
; (fun __caml_parser_env ->
    Obj.repr(
# 297 "parser_midl.mly"
                                                ( () )
# 1498 "parser_midl.ml"
               : 'opt_int))
; (fun __caml_parser_env ->
    Obj.repr(
# 298 "parser_midl.mly"
                                                ( () )
# 1504 "parser_midl.ml"
               : 'opt_int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declarator) in
    Obj.repr(
# 305 "parser_midl.mly"
        ( [_1] )
# 1511 "parser_midl.ml"
               : 'declarators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declarators) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'declarator) in
    Obj.repr(
# 307 "parser_midl.mly"
        ( _3 :: _1 )
# 1519 "parser_midl.ml"
               : 'declarators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pointer_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'direct_declarator) in
    Obj.repr(
# 311 "parser_midl.mly"
        ( fun ty -> _2(_1(ty)) )
# 1527 "parser_midl.ml"
               : 'declarator))
; (fun __caml_parser_env ->
    Obj.repr(
# 315 "parser_midl.mly"
        ( fun ty -> ty )
# 1533 "parser_midl.ml"
               : 'pointer_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pointer_opt) in
    Obj.repr(
# 317 "parser_midl.mly"
        ( fun ty -> _1(Type_pointer(!pointer_default, ty)) )
# 1540 "parser_midl.ml"
               : 'pointer_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pointer_opt) in
    Obj.repr(
# 319 "parser_midl.mly"
        ( fun ty -> _1(Type_const(Type_pointer(!pointer_default, ty))) )
# 1547 "parser_midl.ml"
               : 'pointer_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 323 "parser_midl.mly"
        ( fun ty -> (_1, ty) )
# 1554 "parser_midl.ml"
               : 'direct_declarator))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declarator) in
    Obj.repr(
# 325 "parser_midl.mly"
        ( _2 )
# 1561 "parser_midl.ml"
               : 'direct_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'direct_declarator) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'array_bounds_declarator) in
    Obj.repr(
# 327 "parser_midl.mly"
        ( fun ty -> let (id, ty1) = _1 ty in (id, Type_array(_2, ty1)) )
# 1569 "parser_midl.ml"
               : 'direct_declarator))
; (fun __caml_parser_env ->
    Obj.repr(
# 330 "parser_midl.mly"
                                                ( no_bounds )
# 1575 "parser_midl.ml"
               : 'array_bounds_declarator))
; (fun __caml_parser_env ->
    Obj.repr(
# 331 "parser_midl.mly"
                                                ( no_bounds )
# 1581 "parser_midl.ml"
               : 'array_bounds_declarator))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'lexpr) in
    Obj.repr(
# 332 "parser_midl.mly"
                                                ( one_bound _2 )
# 1588 "parser_midl.ml"
               : 'array_bounds_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 339 "parser_midl.mly"
        ( _1 )
# 1595 "parser_midl.ml"
               : 'union_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 341 "parser_midl.mly"
        ( "u" )
# 1601 "parser_midl.ml"
               : 'union_name))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'opt_ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'field_declarators) in
    Obj.repr(
# 345 "parser_midl.mly"
        ( {sd_name = _2; sd_mod = ""; sd_stamp = 0; sd_fields = _4} )
# 1609 "parser_midl.ml"
               : 'struct_declarator))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : 'opt_ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'simple_type_spec) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'ident) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : 'union_name) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'union_body) in
    Obj.repr(
# 348 "parser_midl.mly"
        ( make_discriminated_union _2 _8 _6 _5 (List.rev _10) )
# 1620 "parser_midl.ml"
               : 'struct_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_declarator) in
    Obj.repr(
# 352 "parser_midl.mly"
        ( _1 )
# 1627 "parser_midl.ml"
               : 'field_declarators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_declarators) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_declarator) in
    Obj.repr(
# 354 "parser_midl.mly"
        ( _1 @ _2 )
# 1635 "parser_midl.ml"
               : 'field_declarators))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'attributes) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'type_spec) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'declarators) in
    Obj.repr(
# 361 "parser_midl.mly"
        ( make_fields _1 _2 (List.rev _3) )
# 1644 "parser_midl.ml"
               : 'field_declarator))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'opt_ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'union_body) in
    Obj.repr(
# 368 "parser_midl.mly"
        ( {ud_name = _2; ud_mod = ""; ud_stamp = 0; ud_cases = List.rev _4} )
# 1652 "parser_midl.ml"
               : 'union_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'union_case) in
    Obj.repr(
# 371 "parser_midl.mly"
                                                        ( [_1] )
# 1659 "parser_midl.ml"
               : 'union_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'union_body) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'union_case) in
    Obj.repr(
# 372 "parser_midl.mly"
                                                        ( _2 :: _1 )
# 1667 "parser_midl.ml"
               : 'union_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'case_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_field_declarator) in
    Obj.repr(
# 376 "parser_midl.mly"
        ( {case_labels = List.rev _1; case_field = _2} )
# 1675 "parser_midl.ml"
               : 'union_case))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_field_declarator) in
    Obj.repr(
# 378 "parser_midl.mly"
        ( {case_labels = []; case_field = _3} )
# 1682 "parser_midl.ml"
               : 'union_case))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'case_label) in
    Obj.repr(
# 381 "parser_midl.mly"
                                                        ( [_1] )
# 1689 "parser_midl.ml"
               : 'case_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'case_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'case_label) in
    Obj.repr(
# 382 "parser_midl.mly"
                                                        ( _2 :: _1 )
# 1697 "parser_midl.ml"
               : 'case_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ident) in
    Obj.repr(
# 385 "parser_midl.mly"
                                                        ( _2 )
# 1704 "parser_midl.ml"
               : 'case_label))
; (fun __caml_parser_env ->
    Obj.repr(
# 389 "parser_midl.mly"
        ( None )
# 1710 "parser_midl.ml"
               : 'opt_field_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'type_spec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'declarator) in
    Obj.repr(
# 394 "parser_midl.mly"
        ( Some(make_field _1 _2 _3) )
# 1719 "parser_midl.ml"
               : 'opt_field_declarator))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'opt_ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'enum_cases) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'opt_comma) in
    Obj.repr(
# 401 "parser_midl.mly"
         ( {en_name = _2; en_mod = ""; en_stamp = 0; en_consts = List.rev _4} )
# 1728 "parser_midl.ml"
               : 'enum_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enum_case) in
    Obj.repr(
# 404 "parser_midl.mly"
                                                        ( [_1] )
# 1735 "parser_midl.ml"
               : 'enum_cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'enum_cases) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'enum_case) in
    Obj.repr(
# 405 "parser_midl.mly"
                                                        ( _3 :: _1 )
# 1743 "parser_midl.ml"
               : 'enum_cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 409 "parser_midl.mly"
      ( {const_name = _1; const_val = None} )
# 1750 "parser_midl.ml"
               : 'enum_case))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 411 "parser_midl.mly"
      ( {const_name = _1; const_val = Some _3} )
# 1758 "parser_midl.ml"
               : 'enum_case))
; (fun __caml_parser_env ->
    Obj.repr(
# 414 "parser_midl.mly"
                                                        ( () )
# 1764 "parser_midl.ml"
               : 'opt_comma))
; (fun __caml_parser_env ->
    Obj.repr(
# 415 "parser_midl.mly"
                                                        ( () )
# 1770 "parser_midl.ml"
               : 'opt_comma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attributes) in
    Obj.repr(
# 421 "parser_midl.mly"
                        ( let a = _1 in save_defaults(); update_defaults a; a )
# 1777 "parser_midl.ml"
               : 'interface_attributes))
; (fun __caml_parser_env ->
    Obj.repr(
# 424 "parser_midl.mly"
                                                        ( [] )
# 1783 "parser_midl.ml"
               : 'attributes))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_list) in
    Obj.repr(
# 425 "parser_midl.mly"
                                                        ( List.rev _2 )
# 1790 "parser_midl.ml"
               : 'attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attribute) in
    Obj.repr(
# 428 "parser_midl.mly"
                                                        ( [_1] )
# 1797 "parser_midl.ml"
               : 'attribute_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 429 "parser_midl.mly"
                                                        ( [] )
# 1803 "parser_midl.ml"
               : 'attribute_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attribute_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attribute) in
    Obj.repr(
# 430 "parser_midl.mly"
                                                        ( _3 :: _1 )
# 1811 "parser_midl.ml"
               : 'attribute_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_list) in
    Obj.repr(
# 431 "parser_midl.mly"
                                                        ( _1 )
# 1818 "parser_midl.ml"
               : 'attribute_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 435 "parser_midl.mly"
        ( (_1, []) )
# 1825 "parser_midl.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attr_vars) in
    Obj.repr(
# 437 "parser_midl.mly"
        ( (_1, List.rev _3) )
# 1833 "parser_midl.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attribute) in
    Obj.repr(
# 439 "parser_midl.mly"
        ( make_star_attribute _2 )
# 1840 "parser_midl.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    Obj.repr(
# 441 "parser_midl.mly"
        ( make_star_attribute _1 )
# 1847 "parser_midl.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 443 "parser_midl.mly"
        ( (_1, [Expr_string _2]) )
# 1855 "parser_midl.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr_var) in
    Obj.repr(
# 447 "parser_midl.mly"
        ( [_1] )
# 1862 "parser_midl.ml"
               : 'attr_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attr_vars) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr_var) in
    Obj.repr(
# 449 "parser_midl.mly"
        ( _3 :: _1 )
# 1870 "parser_midl.ml"
               : 'attr_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 453 "parser_midl.mly"
        ( _1 )
# 1877 "parser_midl.ml"
               : 'attr_var))
; (fun __caml_parser_env ->
    Obj.repr(
# 455 "parser_midl.mly"
        ( null_attr_var )
# 1883 "parser_midl.ml"
               : 'attr_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 462 "parser_midl.mly"
        ( Expr_ident _1 )
# 1890 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64) in
    Obj.repr(
# 464 "parser_midl.mly"
        ( Expr_int _1 )
# 1897 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 466 "parser_midl.mly"
        ( Expr_int(Int64.of_int(Char.code _1)) )
# 1904 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 468 "parser_midl.mly"
        ( Expr_int Int64.one )
# 1910 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 470 "parser_midl.mly"
        ( Expr_int Int64.zero )
# 1916 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 472 "parser_midl.mly"
        ( Expr_string _1 )
# 1923 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 474 "parser_midl.mly"
        ( Expr_cond(_1, _3, _5) )
# 1932 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 476 "parser_midl.mly"
        ( Expr_sequor(_1, _3) )
# 1940 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 478 "parser_midl.mly"
        ( Expr_sequand(_1, _3) )
# 1948 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 480 "parser_midl.mly"
        ( Expr_logor(_1, _3) )
# 1956 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 482 "parser_midl.mly"
        ( Expr_logxor(_1, _3) )
# 1964 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 484 "parser_midl.mly"
        ( Expr_logand(_1, _3) )
# 1972 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 486 "parser_midl.mly"
        ( Expr_eq(_1, _3) )
# 1980 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 488 "parser_midl.mly"
        ( Expr_ne(_1, _3) )
# 1988 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 490 "parser_midl.mly"
        ( Expr_lt(_1, _3) )
# 1996 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 492 "parser_midl.mly"
        ( Expr_gt(_1, _3) )
# 2004 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 494 "parser_midl.mly"
        ( Expr_le(_1, _3) )
# 2012 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 496 "parser_midl.mly"
        ( Expr_ge(_1, _3) )
# 2020 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 498 "parser_midl.mly"
        ( Expr_lshift(_1, _3) )
# 2028 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 500 "parser_midl.mly"
        ( Expr_rshift(_1, _3) )
# 2036 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 502 "parser_midl.mly"
        ( Expr_rshift_unsigned(_1, _3) )
# 2044 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 504 "parser_midl.mly"
        ( Expr_plus(_1, _3) )
# 2052 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 506 "parser_midl.mly"
        ( Expr_minus(_1, _3) )
# 2060 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 508 "parser_midl.mly"
        ( Expr_times(_1, _3) )
# 2068 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 510 "parser_midl.mly"
        ( Expr_div(_1, _3) )
# 2076 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 512 "parser_midl.mly"
        ( Expr_mod(_1, _3) )
# 2084 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 514 "parser_midl.mly"
        ( _2 )
# 2091 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 516 "parser_midl.mly"
        ( Expr_neg(_2) )
# 2098 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 518 "parser_midl.mly"
        ( Expr_lognot(_2) )
# 2105 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 520 "parser_midl.mly"
        ( Expr_boolnot(_2) )
# 2112 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 522 "parser_midl.mly"
        ( Expr_deref(_2) )
# 2119 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 524 "parser_midl.mly"
        ( Expr_addressof(_2) )
# 2126 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'type_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lexpr) in
    Obj.repr(
# 526 "parser_midl.mly"
        ( Expr_cast(_2, _4) )
# 2134 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_expr) in
    Obj.repr(
# 528 "parser_midl.mly"
        ( Expr_sizeof(_3) )
# 2141 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'lexpr) in
    Obj.repr(
# 530 "parser_midl.mly"
        ( Expr_subscript(_1, _3) )
# 2149 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 532 "parser_midl.mly"
        ( Expr_dereffield(_1, _3) )
# 2157 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 534 "parser_midl.mly"
        ( Expr_field(_1, _3) )
# 2165 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int64) in
    Obj.repr(
# 537 "parser_midl.mly"
        ( Expr_field(_1, Int64.to_string _3) )
# 2173 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'lexpr) in
    Obj.repr(
# 539 "parser_midl.mly"
        ( _2 )
# 2180 "parser_midl.ml"
               : 'lexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_spec) in
    Obj.repr(
# 544 "parser_midl.mly"
        ( _1 )
# 2187 "parser_midl.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_spec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'abstract_declarator) in
    Obj.repr(
# 546 "parser_midl.mly"
        ( _2(_1) )
# 2195 "parser_midl.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 551 "parser_midl.mly"
        ( fun ty -> Type_pointer(!pointer_default, ty) )
# 2201 "parser_midl.ml"
               : 'abstract_declarator))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'direct_abstract_declarator) in
    Obj.repr(
# 553 "parser_midl.mly"
        ( fun ty -> _2(Type_pointer(!pointer_default, ty)) )
# 2208 "parser_midl.ml"
               : 'abstract_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'direct_abstract_declarator) in
    Obj.repr(
# 555 "parser_midl.mly"
        ( _1 )
# 2215 "parser_midl.ml"
               : 'abstract_declarator))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'abstract_declarator) in
    Obj.repr(
# 560 "parser_midl.mly"
        ( _2 )
# 2222 "parser_midl.ml"
               : 'direct_abstract_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'direct_abstract_declarator) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'array_bounds_declarator) in
    Obj.repr(
# 562 "parser_midl.mly"
        ( fun ty -> Type_array(_2, ty) )
# 2230 "parser_midl.ml"
               : 'direct_abstract_declarator))
; (fun __caml_parser_env ->
    Obj.repr(
# 568 "parser_midl.mly"
                                ( "" )
# 2236 "parser_midl.ml"
               : 'opt_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 569 "parser_midl.mly"
                                ( _1 )
# 2243 "parser_midl.ml"
               : 'opt_ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 576 "parser_midl.mly"
        ( None )
# 2249 "parser_midl.ml"
               : 'opt_superinterface))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 578 "parser_midl.mly"
        ( Some _2 )
# 2256 "parser_midl.ml"
               : 'opt_superinterface))
; (fun __caml_parser_env ->
    Obj.repr(
# 584 "parser_midl.mly"
               ( () )
# 2262 "parser_midl.ml"
               : 'opt_semi))
; (fun __caml_parser_env ->
    Obj.repr(
# 585 "parser_midl.mly"
               ( () )
# 2268 "parser_midl.ml"
               : 'opt_semi))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 592 "parser_midl.mly"
        ( _1 )
# 2275 "parser_midl.ml"
               : 'ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 594 "parser_midl.mly"
        ( _1 )
# 2282 "parser_midl.ml"
               : 'ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 601 "parser_midl.mly"
        ( type_names := StringSet.add _1 !type_names; _1 )
# 2289 "parser_midl.ml"
               : 'tydef_ident))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 608 "parser_midl.mly"
        ( ("", _3) )
# 2296 "parser_midl.ml"
               : 'quote))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 610 "parser_midl.mly"
        ( (_3, _5) )
# 2304 "parser_midl.ml"
               : 'quote))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 612 "parser_midl.mly"
        ( ("h", _3) )
# 2311 "parser_midl.ml"
               : 'quote))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : File.components)
